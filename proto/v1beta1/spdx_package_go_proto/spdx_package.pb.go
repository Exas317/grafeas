// Copyright 2021 The Grafeas Authors. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.13.0
// source: spdx_package.proto

package spdx_package_go_proto

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// The category of the external reference
type PackageInfoNote_ExternalRef_Category int32

const (
	// Unspecified
	PackageInfoNote_ExternalRef_CATEGORY_UNSPECIFIED PackageInfoNote_ExternalRef_Category = 0
	// Security (e.g. cpe22Type, cpe23Type)
	PackageInfoNote_ExternalRef_SECURITY PackageInfoNote_ExternalRef_Category = 1
	// Package Manager (e.g. maven-central, npm, nuget, bower, purl)
	PackageInfoNote_ExternalRef_PACKAGE_MANAGER PackageInfoNote_ExternalRef_Category = 2
	// Persistent-Id (e.g. swh)
	PackageInfoNote_ExternalRef_PERSISTENT_ID PackageInfoNote_ExternalRef_Category = 3
	// Other
	PackageInfoNote_ExternalRef_OTHER PackageInfoNote_ExternalRef_Category = 4
)

// Enum value maps for PackageInfoNote_ExternalRef_Category.
var (
	PackageInfoNote_ExternalRef_Category_name = map[int32]string{
		0: "CATEGORY_UNSPECIFIED",
		1: "SECURITY",
		2: "PACKAGE_MANAGER",
		3: "PERSISTENT_ID",
		4: "OTHER",
	}
	PackageInfoNote_ExternalRef_Category_value = map[string]int32{
		"CATEGORY_UNSPECIFIED": 0,
		"SECURITY":             1,
		"PACKAGE_MANAGER":      2,
		"PERSISTENT_ID":        3,
		"OTHER":                4,
	}
)

func (x PackageInfoNote_ExternalRef_Category) Enum() *PackageInfoNote_ExternalRef_Category {
	p := new(PackageInfoNote_ExternalRef_Category)
	*p = x
	return p
}

func (x PackageInfoNote_ExternalRef_Category) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PackageInfoNote_ExternalRef_Category) Descriptor() protoreflect.EnumDescriptor {
	return file_spdx_package_proto_enumTypes[0].Descriptor()
}

func (PackageInfoNote_ExternalRef_Category) Type() protoreflect.EnumType {
	return &file_spdx_package_proto_enumTypes[0]
}

func (x PackageInfoNote_ExternalRef_Category) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PackageInfoNote_ExternalRef_Category.Descriptor instead.
func (PackageInfoNote_ExternalRef_Category) EnumDescriptor() ([]byte, []int) {
	return file_spdx_package_proto_rawDescGZIP(), []int{0, 0, 0}
}

// PackageInfoNote represents an SPDX Package Information
// section: https://spdx.github.io/spdx-spec/3-package-information/
type PackageInfoNote struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Identify the full name of the package as given by the Package Originator
	Title string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	// Identify the version of the package
	Version string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	// Identify the actual distribution source for the package/directory
	// identified in the SPDX file
	Supplier string `protobuf:"bytes,3,opt,name=supplier,proto3" json:"supplier,omitempty"`
	// If the package identified in the SPDX file originated from a different
	// person or organization than identified as Package Supplier, this field
	// identifies from where or whom the package originally came
	Originator string `protobuf:"bytes,4,opt,name=originator,proto3" json:"originator,omitempty"`
	//  This section identifies the download Universal Resource Locator (URL), or
	//  a specific location within a version control system (VCS) for the package
	//  at the time that the SPDX file was created
	DownloadLocation string `protobuf:"bytes,5,opt,name=download_location,json=downloadLocation,proto3" json:"download_location,omitempty"`
	// Indicates whether the file content of this package has been available for
	// or subjected to analysis when creating the SPDX document
	Analyzed bool `protobuf:"varint,6,opt,name=analyzed,proto3" json:"analyzed,omitempty"`
	// This field provides an independently reproducible mechanism identifying
	// specific contents of a package based on the actual files (except the SPDX
	// file itself, if it is included in the package) that make up each package
	// and that correlates to the data in this SPDX file
	VerificationCode string `protobuf:"bytes,7,opt,name=verification_code,json=verificationCode,proto3" json:"verification_code,omitempty"`
	// Provide an independently reproducible mechanism that permits unique
	// identification of a specific package that correlates to the data in this
	// SPDX file
	Checksum string `protobuf:"bytes,8,opt,name=checksum,proto3" json:"checksum,omitempty"`
	// Provide a place for the SPDX file creator to record a web site that serves
	// as the package's home page
	HomePage string `protobuf:"bytes,9,opt,name=home_page,json=homePage,proto3" json:"home_page,omitempty"`
	// Contain the license the SPDX file creator has concluded as governing the
	// This field is to contain a list of all licenses found in the package. The
	// relationship between licenses (i.e., conjunctive, disjunctive) is not
	// specified in this field â€“ it is simply a listing of all licenses found
	FilesLicenseInfo []string `protobuf:"bytes,10,rep,name=files_license_info,json=filesLicenseInfo,proto3" json:"files_license_info,omitempty"`
	// List the licenses that have been declared by the authors of the package
	LicenseDeclared string `protobuf:"bytes,11,opt,name=license_declared,json=licenseDeclared,proto3" json:"license_declared,omitempty"`
	// Identify the copyright holders of the package, as well as any dates present
	Copyright string `protobuf:"bytes,12,opt,name=copyright,proto3" json:"copyright,omitempty"`
	// A short description of the package
	SummaryDescription string `protobuf:"bytes,13,opt,name=summary_description,json=summaryDescription,proto3" json:"summary_description,omitempty"`
	// A more detailed description of the package
	DetailedDescription string `protobuf:"bytes,14,opt,name=detailed_description,json=detailedDescription,proto3" json:"detailed_description,omitempty"`
	// ExternalRef
	ExternalRefs []*PackageInfoNote_ExternalRef `protobuf:"bytes,15,rep,name=external_refs,json=externalRefs,proto3" json:"external_refs,omitempty"`
	// A place for the SPDX data creator to record, at the package level,
	// acknowledgements that may be needed to be communicated in some contexts
	Attribution string `protobuf:"bytes,16,opt,name=attribution,proto3" json:"attribution,omitempty"`
}

func (x *PackageInfoNote) Reset() {
	*x = PackageInfoNote{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spdx_package_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PackageInfoNote) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PackageInfoNote) ProtoMessage() {}

func (x *PackageInfoNote) ProtoReflect() protoreflect.Message {
	mi := &file_spdx_package_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PackageInfoNote.ProtoReflect.Descriptor instead.
func (*PackageInfoNote) Descriptor() ([]byte, []int) {
	return file_spdx_package_proto_rawDescGZIP(), []int{0}
}

func (x *PackageInfoNote) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *PackageInfoNote) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *PackageInfoNote) GetSupplier() string {
	if x != nil {
		return x.Supplier
	}
	return ""
}

func (x *PackageInfoNote) GetOriginator() string {
	if x != nil {
		return x.Originator
	}
	return ""
}

func (x *PackageInfoNote) GetDownloadLocation() string {
	if x != nil {
		return x.DownloadLocation
	}
	return ""
}

func (x *PackageInfoNote) GetAnalyzed() bool {
	if x != nil {
		return x.Analyzed
	}
	return false
}

func (x *PackageInfoNote) GetVerificationCode() string {
	if x != nil {
		return x.VerificationCode
	}
	return ""
}

func (x *PackageInfoNote) GetChecksum() string {
	if x != nil {
		return x.Checksum
	}
	return ""
}

func (x *PackageInfoNote) GetHomePage() string {
	if x != nil {
		return x.HomePage
	}
	return ""
}

func (x *PackageInfoNote) GetFilesLicenseInfo() []string {
	if x != nil {
		return x.FilesLicenseInfo
	}
	return nil
}

func (x *PackageInfoNote) GetLicenseDeclared() string {
	if x != nil {
		return x.LicenseDeclared
	}
	return ""
}

func (x *PackageInfoNote) GetCopyright() string {
	if x != nil {
		return x.Copyright
	}
	return ""
}

func (x *PackageInfoNote) GetSummaryDescription() string {
	if x != nil {
		return x.SummaryDescription
	}
	return ""
}

func (x *PackageInfoNote) GetDetailedDescription() string {
	if x != nil {
		return x.DetailedDescription
	}
	return ""
}

func (x *PackageInfoNote) GetExternalRefs() []*PackageInfoNote_ExternalRef {
	if x != nil {
		return x.ExternalRefs
	}
	return nil
}

func (x *PackageInfoNote) GetAttribution() string {
	if x != nil {
		return x.Attribution
	}
	return ""
}

// PackageInfoOccurrence represents an SPDX Package Information
// section: https://spdx.github.io/spdx-spec/3-package-information/
type PackageInfoOccurrence struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Uniquely identify any element in an SPDX document which may be referenced
	// by other elements
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Provide the actual file name of the package, or path of the directory being
	// treated as a package
	Filename string `protobuf:"bytes,2,opt,name=filename,proto3" json:"filename,omitempty"`
	// Provide a place for the SPDX file creator to record any relevant background
	// information or additional comments about the origin of the package
	SourceInfo string `protobuf:"bytes,3,opt,name=source_info,json=sourceInfo,proto3" json:"source_info,omitempty"`
	// package or alternative values, if the governing license cannot be
	// determined
	LicenseConcluded string `protobuf:"bytes,4,opt,name=license_concluded,json=licenseConcluded,proto3" json:"license_concluded,omitempty"`
	// This field provides a place for the SPDX file creator to record any
	// relevant background information or analysis that went in to arriving at the
	// Concluded License for a package
	LicenseComments string `protobuf:"bytes,5,opt,name=license_comments,json=licenseComments,proto3" json:"license_comments,omitempty"`
	// A place for the SPDX file creator to record any general
	// comments about the package being described
	Comment string `protobuf:"bytes,6,opt,name=comment,proto3" json:"comment,omitempty"`
}

func (x *PackageInfoOccurrence) Reset() {
	*x = PackageInfoOccurrence{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spdx_package_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PackageInfoOccurrence) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PackageInfoOccurrence) ProtoMessage() {}

func (x *PackageInfoOccurrence) ProtoReflect() protoreflect.Message {
	mi := &file_spdx_package_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PackageInfoOccurrence.ProtoReflect.Descriptor instead.
func (*PackageInfoOccurrence) Descriptor() ([]byte, []int) {
	return file_spdx_package_proto_rawDescGZIP(), []int{1}
}

func (x *PackageInfoOccurrence) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PackageInfoOccurrence) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

func (x *PackageInfoOccurrence) GetSourceInfo() string {
	if x != nil {
		return x.SourceInfo
	}
	return ""
}

func (x *PackageInfoOccurrence) GetLicenseConcluded() string {
	if x != nil {
		return x.LicenseConcluded
	}
	return ""
}

func (x *PackageInfoOccurrence) GetLicenseComments() string {
	if x != nil {
		return x.LicenseComments
	}
	return ""
}

func (x *PackageInfoOccurrence) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

// An External Reference allows a Package to reference an external source of
// additional information, metadata, enumerations, asset identifiers, or
// downloadable content believed to be relevant to the Package
type PackageInfoNote_ExternalRef struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// An External Reference allows a Package to reference an external source of
	// additional information, metadata, enumerations, asset identifiers, or
	// downloadable content believed to be relevant to the Package
	Category PackageInfoNote_ExternalRef_Category `protobuf:"varint,1,opt,name=category,proto3,enum=grafeas.v1beta1.spdx_package.PackageInfoNote_ExternalRef_Category" json:"category,omitempty"`
	// Type of category (e.g. 'npm' for the PACKAGE_MANAGER category)
	Type string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	// The unique string with no spaces necessary to access the package-specific
	// information, metadata, or content within the target location
	Locator string `protobuf:"bytes,3,opt,name=locator,proto3" json:"locator,omitempty"`
	// Human-readable information about the purpose and target of the reference
	Comment string `protobuf:"bytes,4,opt,name=comment,proto3" json:"comment,omitempty"`
}

func (x *PackageInfoNote_ExternalRef) Reset() {
	*x = PackageInfoNote_ExternalRef{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spdx_package_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PackageInfoNote_ExternalRef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PackageInfoNote_ExternalRef) ProtoMessage() {}

func (x *PackageInfoNote_ExternalRef) ProtoReflect() protoreflect.Message {
	mi := &file_spdx_package_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PackageInfoNote_ExternalRef.ProtoReflect.Descriptor instead.
func (*PackageInfoNote_ExternalRef) Descriptor() ([]byte, []int) {
	return file_spdx_package_proto_rawDescGZIP(), []int{0, 0}
}

func (x *PackageInfoNote_ExternalRef) GetCategory() PackageInfoNote_ExternalRef_Category {
	if x != nil {
		return x.Category
	}
	return PackageInfoNote_ExternalRef_CATEGORY_UNSPECIFIED
}

func (x *PackageInfoNote_ExternalRef) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *PackageInfoNote_ExternalRef) GetLocator() string {
	if x != nil {
		return x.Locator
	}
	return ""
}

func (x *PackageInfoNote_ExternalRef) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

var File_spdx_package_proto protoreflect.FileDescriptor

var file_spdx_package_proto_rawDesc = []byte{
	0x0a, 0x12, 0x73, 0x70, 0x64, 0x78, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1c, 0x67, 0x72, 0x61, 0x66, 0x65, 0x61, 0x73, 0x2e, 0x76, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x73, 0x70, 0x64, 0x78, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x61,
	0x67, 0x65, 0x22, 0xa8, 0x07, 0x0a, 0x0f, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x4e, 0x6f, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x69,
	0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x69,
	0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x74,
	0x6f, 0x72, 0x12, 0x2b, 0x0a, 0x11, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x64,
	0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x1a, 0x0a, 0x08, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x08, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x64, 0x12, 0x2b, 0x0a, 0x11, 0x76,
	0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x68, 0x65, 0x63,
	0x6b, 0x73, 0x75, 0x6d, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x68, 0x65, 0x63,
	0x6b, 0x73, 0x75, 0x6d, 0x12, 0x1b, 0x0a, 0x09, 0x68, 0x6f, 0x6d, 0x65, 0x5f, 0x70, 0x61, 0x67,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x6d, 0x65, 0x50, 0x61, 0x67,
	0x65, 0x12, 0x2c, 0x0a, 0x12, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x5f, 0x6c, 0x69, 0x63, 0x65, 0x6e,
	0x73, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x66,
	0x69, 0x6c, 0x65, 0x73, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x29, 0x0a, 0x10, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x5f, 0x64, 0x65, 0x63, 0x6c, 0x61,
	0x72, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6c, 0x69, 0x63, 0x65, 0x6e,
	0x73, 0x65, 0x44, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x65, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f,
	0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63,
	0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x12, 0x2f, 0x0a, 0x13, 0x73, 0x75, 0x6d, 0x6d,
	0x61, 0x72, 0x79, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x31, 0x0a, 0x14, 0x64, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x65, 0x64, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x65,
	0x64, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5e, 0x0a, 0x0d,
	0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x66, 0x73, 0x18, 0x0f, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x67, 0x72, 0x61, 0x66, 0x65, 0x61, 0x73, 0x2e, 0x76, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x73, 0x70, 0x64, 0x78, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x61,
	0x67, 0x65, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x4e, 0x6f,
	0x74, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x66, 0x52, 0x0c,
	0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x66, 0x73, 0x12, 0x20, 0x0a, 0x0b,
	0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x9c,
	0x02, 0x0a, 0x0b, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x66, 0x12, 0x5e,
	0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x42, 0x2e, 0x67, 0x72, 0x61, 0x66, 0x65, 0x61, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x31, 0x2e, 0x73, 0x70, 0x64, 0x78, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x2e,
	0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x4e, 0x6f, 0x74, 0x65, 0x2e,
	0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x66, 0x2e, 0x43, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x18, 0x0a, 0x07,
	0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x65, 0x0a, 0x08, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x12, 0x18, 0x0a, 0x14, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08,
	0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x50, 0x41,
	0x43, 0x4b, 0x41, 0x47, 0x45, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x52, 0x10, 0x02, 0x12,
	0x11, 0x0a, 0x0d, 0x50, 0x45, 0x52, 0x53, 0x49, 0x53, 0x54, 0x45, 0x4e, 0x54, 0x5f, 0x49, 0x44,
	0x10, 0x03, 0x12, 0x09, 0x0a, 0x05, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x04, 0x22, 0xd6, 0x01,
	0x0a, 0x15, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x4f, 0x63, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2b, 0x0a, 0x11, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x5f,
	0x63, 0x6f, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x10, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65,
	0x64, 0x12, 0x29, 0x0a, 0x10, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x5f, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6c, 0x69, 0x63,
	0x65, 0x6e, 0x73, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x18, 0x0a, 0x07,
	0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x69, 0x0a, 0x1f, 0x69, 0x6f, 0x2e, 0x67, 0x72, 0x61,
	0x66, 0x65, 0x61, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x73, 0x70, 0x64,
	0x78, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x50, 0x01, 0x5a, 0x3e, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x72, 0x61, 0x66, 0x65, 0x61, 0x73, 0x2f,
	0x67, 0x72, 0x61, 0x66, 0x65, 0x61, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x31, 0x2f, 0x73, 0x70, 0x64, 0x78, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x61,
	0x67, 0x65, 0x5f, 0x67, 0x6f, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0xa2, 0x02, 0x03, 0x47, 0x52,
	0x41, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_spdx_package_proto_rawDescOnce sync.Once
	file_spdx_package_proto_rawDescData = file_spdx_package_proto_rawDesc
)

func file_spdx_package_proto_rawDescGZIP() []byte {
	file_spdx_package_proto_rawDescOnce.Do(func() {
		file_spdx_package_proto_rawDescData = protoimpl.X.CompressGZIP(file_spdx_package_proto_rawDescData)
	})
	return file_spdx_package_proto_rawDescData
}

var file_spdx_package_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_spdx_package_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_spdx_package_proto_goTypes = []interface{}{
	(PackageInfoNote_ExternalRef_Category)(0), // 0: grafeas.v1beta1.spdx_package.PackageInfoNote.ExternalRef.Category
	(*PackageInfoNote)(nil),                   // 1: grafeas.v1beta1.spdx_package.PackageInfoNote
	(*PackageInfoOccurrence)(nil),             // 2: grafeas.v1beta1.spdx_package.PackageInfoOccurrence
	(*PackageInfoNote_ExternalRef)(nil),       // 3: grafeas.v1beta1.spdx_package.PackageInfoNote.ExternalRef
}
var file_spdx_package_proto_depIdxs = []int32{
	3, // 0: grafeas.v1beta1.spdx_package.PackageInfoNote.external_refs:type_name -> grafeas.v1beta1.spdx_package.PackageInfoNote.ExternalRef
	0, // 1: grafeas.v1beta1.spdx_package.PackageInfoNote.ExternalRef.category:type_name -> grafeas.v1beta1.spdx_package.PackageInfoNote.ExternalRef.Category
	2, // [2:2] is the sub-list for method output_type
	2, // [2:2] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_spdx_package_proto_init() }
func file_spdx_package_proto_init() {
	if File_spdx_package_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_spdx_package_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PackageInfoNote); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spdx_package_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PackageInfoOccurrence); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spdx_package_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PackageInfoNote_ExternalRef); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_spdx_package_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_spdx_package_proto_goTypes,
		DependencyIndexes: file_spdx_package_proto_depIdxs,
		EnumInfos:         file_spdx_package_proto_enumTypes,
		MessageInfos:      file_spdx_package_proto_msgTypes,
	}.Build()
	File_spdx_package_proto = out.File
	file_spdx_package_proto_rawDesc = nil
	file_spdx_package_proto_goTypes = nil
	file_spdx_package_proto_depIdxs = nil
}
