// Copyright 2021 The Grafeas Authors. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.13.0
// source: spdx_document.proto

package spdx_document_go_proto

import (
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// DocumentNote represents an SPDX Document Creation Infromation section:
// https://spdx.github.io/spdx-spec/2-document-creation-information/
type DocumentNote struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Provide a reference number that can be used to understand how to parse and
	// interpret the rest of the file
	SpdxVersion string `protobuf:"bytes,1,opt,name=spdx_version,json=spdxVersion,proto3" json:"spdx_version,omitempty"`
	// Compliance with the SPDX specification includes populating the SPDX fields
	// therein with data related to such fields ("SPDX-Metadata")
	DataLicence string `protobuf:"bytes,2,opt,name=data_licence,json=dataLicence,proto3" json:"data_licence,omitempty"`
}

func (x *DocumentNote) Reset() {
	*x = DocumentNote{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spdx_document_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DocumentNote) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DocumentNote) ProtoMessage() {}

func (x *DocumentNote) ProtoReflect() protoreflect.Message {
	mi := &file_spdx_document_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DocumentNote.ProtoReflect.Descriptor instead.
func (*DocumentNote) Descriptor() ([]byte, []int) {
	return file_spdx_document_proto_rawDescGZIP(), []int{0}
}

func (x *DocumentNote) GetSpdxVersion() string {
	if x != nil {
		return x.SpdxVersion
	}
	return ""
}

func (x *DocumentNote) GetDataLicence() string {
	if x != nil {
		return x.DataLicence
	}
	return ""
}

// DocumentOccurrence represents an SPDX Document Creation Information
// section: https://spdx.github.io/spdx-spec/2-document-creation-information/
type DocumentOccurrence struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Identify the current SPDX document which may be referenced in relationships
	// by other files, packages internally and documents externally
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Identify name of this document as designated by creator
	Title string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	// Provide an SPDX document specific namespace as a unique absolute Uniform
	// Resource Identifier (URI) as specified in RFC-3986, with the exception of
	// the ‘#’ delimiter
	Namespace string `protobuf:"bytes,3,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// Identify any external SPDX documents referenced within this SPDX document
	ExternalDocumentRefs []string `protobuf:"bytes,4,rep,name=external_document_refs,json=externalDocumentRefs,proto3" json:"external_document_refs,omitempty"`
	// A field for creators of the SPDX file to provide the version of
	// the SPDX License List used when the SPDX file was created
	LicenseListVersion string `protobuf:"bytes,5,opt,name=license_list_version,json=licenseListVersion,proto3" json:"license_list_version,omitempty"`
	// Identify who (or what, in the case of a tool) created the SPDX file. If the
	// SPDX file was created by an individual, indicate the person's name
	Creators []string `protobuf:"bytes,6,rep,name=creators,proto3" json:"creators,omitempty"`
	// Identify when the SPDX file was originally created. The date is to be
	// specified according to combined date and time in UTC format as specified in
	// ISO 8601 standard
	CreateTime *timestamp.Timestamp `protobuf:"bytes,7,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// A field for creators of the SPDX file to provide general comments
	// about the creation of the SPDX file or any other relevant comment not
	// included in the other fields
	CreatorComment string `protobuf:"bytes,8,opt,name=creator_comment,json=creatorComment,proto3" json:"creator_comment,omitempty"`
	// A field for creators of the SPDX file content to provide comments
	// to the consumers of the SPDX document
	DocumentComment string `protobuf:"bytes,9,opt,name=document_comment,json=documentComment,proto3" json:"document_comment,omitempty"`
}

func (x *DocumentOccurrence) Reset() {
	*x = DocumentOccurrence{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spdx_document_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DocumentOccurrence) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DocumentOccurrence) ProtoMessage() {}

func (x *DocumentOccurrence) ProtoReflect() protoreflect.Message {
	mi := &file_spdx_document_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DocumentOccurrence.ProtoReflect.Descriptor instead.
func (*DocumentOccurrence) Descriptor() ([]byte, []int) {
	return file_spdx_document_proto_rawDescGZIP(), []int{1}
}

func (x *DocumentOccurrence) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DocumentOccurrence) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *DocumentOccurrence) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *DocumentOccurrence) GetExternalDocumentRefs() []string {
	if x != nil {
		return x.ExternalDocumentRefs
	}
	return nil
}

func (x *DocumentOccurrence) GetLicenseListVersion() string {
	if x != nil {
		return x.LicenseListVersion
	}
	return ""
}

func (x *DocumentOccurrence) GetCreators() []string {
	if x != nil {
		return x.Creators
	}
	return nil
}

func (x *DocumentOccurrence) GetCreateTime() *timestamp.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *DocumentOccurrence) GetCreatorComment() string {
	if x != nil {
		return x.CreatorComment
	}
	return ""
}

func (x *DocumentOccurrence) GetDocumentComment() string {
	if x != nil {
		return x.DocumentComment
	}
	return ""
}

var File_spdx_document_proto protoreflect.FileDescriptor

var file_spdx_document_proto_rawDesc = []byte{
	0x0a, 0x13, 0x73, 0x70, 0x64, 0x78, 0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1d, 0x67, 0x72, 0x61, 0x66, 0x65, 0x61, 0x73, 0x2e, 0x76,
	0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x73, 0x70, 0x64, 0x78, 0x5f, 0x64, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x54, 0x0a, 0x0c, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x4e, 0x6f, 0x74, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x70, 0x64, 0x78, 0x5f, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x70, 0x64,
	0x78, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x61, 0x74, 0x61,
	0x5f, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x64, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x63, 0x65, 0x22, 0xed, 0x02, 0x0a, 0x12,
	0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x63, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x14, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x73, 0x12, 0x30, 0x0a, 0x14,
	0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x6c, 0x69, 0x63, 0x65,
	0x6e, 0x73, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1a,
	0x0a, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x3b, 0x0a, 0x0b, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x12, 0x29, 0x0a, 0x10, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x64, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x6b, 0x0a, 0x20, 0x69,
	0x6f, 0x2e, 0x67, 0x72, 0x61, 0x66, 0x65, 0x61, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61,
	0x31, 0x2e, 0x73, 0x70, 0x64, 0x78, 0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x50,
	0x01, 0x5a, 0x3f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x72,
	0x61, 0x66, 0x65, 0x61, 0x73, 0x2f, 0x67, 0x72, 0x61, 0x66, 0x65, 0x61, 0x73, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2f, 0x73, 0x70, 0x64, 0x78,
	0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x67, 0x6f, 0x5f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0xa2, 0x02, 0x03, 0x47, 0x52, 0x41, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_spdx_document_proto_rawDescOnce sync.Once
	file_spdx_document_proto_rawDescData = file_spdx_document_proto_rawDesc
)

func file_spdx_document_proto_rawDescGZIP() []byte {
	file_spdx_document_proto_rawDescOnce.Do(func() {
		file_spdx_document_proto_rawDescData = protoimpl.X.CompressGZIP(file_spdx_document_proto_rawDescData)
	})
	return file_spdx_document_proto_rawDescData
}

var file_spdx_document_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_spdx_document_proto_goTypes = []interface{}{
	(*DocumentNote)(nil),        // 0: grafeas.v1beta1.spdx_document.DocumentNote
	(*DocumentOccurrence)(nil),  // 1: grafeas.v1beta1.spdx_document.DocumentOccurrence
	(*timestamp.Timestamp)(nil), // 2: google.protobuf.Timestamp
}
var file_spdx_document_proto_depIdxs = []int32{
	2, // 0: grafeas.v1beta1.spdx_document.DocumentOccurrence.create_time:type_name -> google.protobuf.Timestamp
	1, // [1:1] is the sub-list for method output_type
	1, // [1:1] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_spdx_document_proto_init() }
func file_spdx_document_proto_init() {
	if File_spdx_document_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_spdx_document_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DocumentNote); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spdx_document_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DocumentOccurrence); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_spdx_document_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_spdx_document_proto_goTypes,
		DependencyIndexes: file_spdx_document_proto_depIdxs,
		MessageInfos:      file_spdx_document_proto_msgTypes,
	}.Build()
	File_spdx_document_proto = out.File
	file_spdx_document_proto_rawDesc = nil
	file_spdx_document_proto_goTypes = nil
	file_spdx_document_proto_depIdxs = nil
}
