// Copyright 2023 The Grafeas Authors. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.13.0
// source: vex.proto

package vex_go_proto

import (
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	common_go_proto "github.com/grafeas/grafeas/proto/v1beta1/common_go_proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Assessment_Status int32

const (
	Assessment_STATUS_UNSPECIFIED Assessment_Status = 0
	// This product is known to be affected by this vulnerability.
	Assessment_AFFECTED Assessment_Status = 1
	// This product is known to be not affected by this vulnerability.
	Assessment_NOT_AFFECTED Assessment_Status = 2
	// This product contains a fix for this vulnerability.
	Assessment_FIXED Assessment_Status = 3
	// It is not known yet whether these versions are or are not affected
	// by the vulnerability. However, it is still under investigation.
	Assessment_UNDER_INVESTIGATION Assessment_Status = 4
)

// Enum value maps for Assessment_Status.
var (
	Assessment_Status_name = map[int32]string{
		0: "STATUS_UNSPECIFIED",
		1: "AFFECTED",
		2: "NOT_AFFECTED",
		3: "FIXED",
		4: "UNDER_INVESTIGATION",
	}
	Assessment_Status_value = map[string]int32{
		"STATUS_UNSPECIFIED":  0,
		"AFFECTED":            1,
		"NOT_AFFECTED":        2,
		"FIXED":               3,
		"UNDER_INVESTIGATION": 4,
	}
)

func (x Assessment_Status) Enum() *Assessment_Status {
	p := new(Assessment_Status)
	*p = x
	return p
}

func (x Assessment_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Assessment_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_vex_proto_enumTypes[0].Descriptor()
}

func (Assessment_Status) Type() protoreflect.EnumType {
	return &file_vex_proto_enumTypes[0]
}

func (x Assessment_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Assessment_Status.Descriptor instead.
func (Assessment_Status) EnumDescriptor() ([]byte, []int) {
	return file_vex_proto_rawDescGZIP(), []int{4, 0}
}

type Assessment_Threat_ThreatType int32

const (
	Assessment_Threat_THREAT_TYPE_UNSPECIFIED Assessment_Threat_ThreatType = 0
	Assessment_Threat_IMPACT                  Assessment_Threat_ThreatType = 1
	Assessment_Threat_EXPLOID_STATUS          Assessment_Threat_ThreatType = 2
)

// Enum value maps for Assessment_Threat_ThreatType.
var (
	Assessment_Threat_ThreatType_name = map[int32]string{
		0: "THREAT_TYPE_UNSPECIFIED",
		1: "IMPACT",
		2: "EXPLOID_STATUS",
	}
	Assessment_Threat_ThreatType_value = map[string]int32{
		"THREAT_TYPE_UNSPECIFIED": 0,
		"IMPACT":                  1,
		"EXPLOID_STATUS":          2,
	}
)

func (x Assessment_Threat_ThreatType) Enum() *Assessment_Threat_ThreatType {
	p := new(Assessment_Threat_ThreatType)
	*p = x
	return p
}

func (x Assessment_Threat_ThreatType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Assessment_Threat_ThreatType) Descriptor() protoreflect.EnumDescriptor {
	return file_vex_proto_enumTypes[1].Descriptor()
}

func (Assessment_Threat_ThreatType) Type() protoreflect.EnumType {
	return &file_vex_proto_enumTypes[1]
}

func (x Assessment_Threat_ThreatType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Assessment_Threat_ThreatType.Descriptor instead.
func (Assessment_Threat_ThreatType) EnumDescriptor() ([]byte, []int) {
	return file_vex_proto_rawDescGZIP(), []int{4, 0, 0}
}

type Assessment_Remediation_RemediationType int32

const (
	Assessment_Remediation_REMEDIATION_TYPE_UNSPECIFIED Assessment_Remediation_RemediationType = 0
	Assessment_Remediation_MITIGATION                   Assessment_Remediation_RemediationType = 1
	Assessment_Remediation_NO_FIX_PLANNED               Assessment_Remediation_RemediationType = 2
	Assessment_Remediation_NONE_AVAILABLE               Assessment_Remediation_RemediationType = 3
	Assessment_Remediation_VENDOR_FIX                   Assessment_Remediation_RemediationType = 4
	Assessment_Remediation_WORKAROUND                   Assessment_Remediation_RemediationType = 5
)

// Enum value maps for Assessment_Remediation_RemediationType.
var (
	Assessment_Remediation_RemediationType_name = map[int32]string{
		0: "REMEDIATION_TYPE_UNSPECIFIED",
		1: "MITIGATION",
		2: "NO_FIX_PLANNED",
		3: "NONE_AVAILABLE",
		4: "VENDOR_FIX",
		5: "WORKAROUND",
	}
	Assessment_Remediation_RemediationType_value = map[string]int32{
		"REMEDIATION_TYPE_UNSPECIFIED": 0,
		"MITIGATION":                   1,
		"NO_FIX_PLANNED":               2,
		"NONE_AVAILABLE":               3,
		"VENDOR_FIX":                   4,
		"WORKAROUND":                   5,
	}
)

func (x Assessment_Remediation_RemediationType) Enum() *Assessment_Remediation_RemediationType {
	p := new(Assessment_Remediation_RemediationType)
	*p = x
	return p
}

func (x Assessment_Remediation_RemediationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Assessment_Remediation_RemediationType) Descriptor() protoreflect.EnumDescriptor {
	return file_vex_proto_enumTypes[2].Descriptor()
}

func (Assessment_Remediation_RemediationType) Type() protoreflect.EnumType {
	return &file_vex_proto_enumTypes[2]
}

func (x Assessment_Remediation_RemediationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Assessment_Remediation_RemediationType.Descriptor instead.
func (Assessment_Remediation_RemediationType) EnumDescriptor() ([]byte, []int) {
	return file_vex_proto_rawDescGZIP(), []int{4, 1, 0}
}

// A single VulnerabilityAssessmentNote represents
// one particular product's vulnerability assessment for one CVE.
type VulnerabilityAssessmentNote struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The title of the note. E.g. `Vex-Debian-11.4`
	Title string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	// Output only. A one sentence description of this Vex.
	ShortDescription string `protobuf:"bytes,2,opt,name=short_description,json=shortDescription,proto3" json:"short_description,omitempty"`
	// Output only. A detailed description of this Vex.
	LongDescription string `protobuf:"bytes,3,opt,name=long_description,json=longDescription,proto3" json:"long_description,omitempty"`
	// Identifies the language used by this document,
	// corresponding to IETF BCP 47 / RFC 5646.
	Language string `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	// Publisher details of this Note.
	Publisher *Publisher `protobuf:"bytes,5,opt,name=publisher,proto3" json:"publisher,omitempty"`
	// The product affected by this vex.
	Product *Product `protobuf:"bytes,6,opt,name=product,proto3" json:"product,omitempty"`
	// Represents a vulnerability assessment for the product.
	Assessment *Assessment `protobuf:"bytes,7,opt,name=assessment,proto3" json:"assessment,omitempty"`
}

func (x *VulnerabilityAssessmentNote) Reset() {
	*x = VulnerabilityAssessmentNote{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vex_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VulnerabilityAssessmentNote) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VulnerabilityAssessmentNote) ProtoMessage() {}

func (x *VulnerabilityAssessmentNote) ProtoReflect() protoreflect.Message {
	mi := &file_vex_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VulnerabilityAssessmentNote.ProtoReflect.Descriptor instead.
func (*VulnerabilityAssessmentNote) Descriptor() ([]byte, []int) {
	return file_vex_proto_rawDescGZIP(), []int{0}
}

func (x *VulnerabilityAssessmentNote) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *VulnerabilityAssessmentNote) GetShortDescription() string {
	if x != nil {
		return x.ShortDescription
	}
	return ""
}

func (x *VulnerabilityAssessmentNote) GetLongDescription() string {
	if x != nil {
		return x.LongDescription
	}
	return ""
}

func (x *VulnerabilityAssessmentNote) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

func (x *VulnerabilityAssessmentNote) GetPublisher() *Publisher {
	if x != nil {
		return x.Publisher
	}
	return nil
}

func (x *VulnerabilityAssessmentNote) GetProduct() *Product {
	if x != nil {
		return x.Product
	}
	return nil
}

func (x *VulnerabilityAssessmentNote) GetAssessment() *Assessment {
	if x != nil {
		return x.Assessment
	}
	return nil
}

// Publisher provides information about the publisher of
// this Note.
type Publisher struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the publisher.
	// Examples: 'Google', 'Google Cloud Platform'.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Provides information about the authority of the issuing party to
	// release the document, in particular, the party's constituency and
	// responsibilities or other obligations.
	IssuingAuthority string `protobuf:"bytes,2,opt,name=issuing_authority,json=issuingAuthority,proto3" json:"issuing_authority,omitempty"`
	// Contains a URL which is under control of the issuing party and can
	// be used as a globally unique identifier for that issuing party.
	// Example: https://csaf.io
	Namespace string `protobuf:"bytes,3,opt,name=namespace,proto3" json:"namespace,omitempty"`
}

func (x *Publisher) Reset() {
	*x = Publisher{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vex_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Publisher) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Publisher) ProtoMessage() {}

func (x *Publisher) ProtoReflect() protoreflect.Message {
	mi := &file_vex_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Publisher.ProtoReflect.Descriptor instead.
func (*Publisher) Descriptor() ([]byte, []int) {
	return file_vex_proto_rawDescGZIP(), []int{1}
}

func (x *Publisher) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Publisher) GetIssuingAuthority() string {
	if x != nil {
		return x.IssuingAuthority
	}
	return ""
}

func (x *Publisher) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

type Product struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the product.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Token required to identify a group of products so that it can be
	// referred to from other parts in the document. There is no predefined
	// or required format for the product_group_id as long as it uniquely
	// identifies a group in the context of the current document.
	Id string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Prodivdes information to help in identifying the product.
	ProductIdentifier *ProductIdentifier `protobuf:"bytes,3,opt,name=product_identifier,json=productIdentifier,proto3" json:"product_identifier,omitempty"`
}

func (x *Product) Reset() {
	*x = Product{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vex_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Product) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Product) ProtoMessage() {}

func (x *Product) ProtoReflect() protoreflect.Message {
	mi := &file_vex_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Product.ProtoReflect.Descriptor instead.
func (*Product) Descriptor() ([]byte, []int) {
	return file_vex_proto_rawDescGZIP(), []int{2}
}

func (x *Product) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Product) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Product) GetProductIdentifier() *ProductIdentifier {
	if x != nil {
		return x.ProductIdentifier
	}
	return nil
}

type ProductIdentifier struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Identifier:
	//
	//	*ProductIdentifier_GenericUri
	Identifier isProductIdentifier_Identifier `protobuf_oneof:"identifier"`
}

func (x *ProductIdentifier) Reset() {
	*x = ProductIdentifier{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vex_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductIdentifier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductIdentifier) ProtoMessage() {}

func (x *ProductIdentifier) ProtoReflect() protoreflect.Message {
	mi := &file_vex_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductIdentifier.ProtoReflect.Descriptor instead.
func (*ProductIdentifier) Descriptor() ([]byte, []int) {
	return file_vex_proto_rawDescGZIP(), []int{3}
}

func (m *ProductIdentifier) GetIdentifier() isProductIdentifier_Identifier {
	if m != nil {
		return m.Identifier
	}
	return nil
}

func (x *ProductIdentifier) GetGenericUri() *common_go_proto.RelatedUrl {
	if x, ok := x.GetIdentifier().(*ProductIdentifier_GenericUri); ok {
		return x.GenericUri
	}
	return nil
}

type isProductIdentifier_Identifier interface {
	isProductIdentifier_Identifier()
}

type ProductIdentifier_GenericUri struct {
	// Contains a URI which is vendor-specific.
	// Example: The artifact repository URL of an image.
	GenericUri *common_go_proto.RelatedUrl `protobuf:"bytes,1,opt,name=generic_uri,json=genericUri,proto3,oneof"`
}

func (*ProductIdentifier_GenericUri) isProductIdentifier_Identifier() {}

// Assessment provides all information that is related to a single vulnerability
// for this product.
type Assessment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Holds the MITRE standard Common Vulnerabilities and Exposures (CVE)
	// tracking number for the vulnerability.
	Cve string `protobuf:"bytes,1,opt,name=cve,proto3" json:"cve,omitempty"`
	// Holds a list of references associated with this vulnerability item and assessment.
	RelatedUrls []*common_go_proto.RelatedUrl `protobuf:"bytes,2,rep,name=related_urls,json=relatedUrls,proto3" json:"related_urls,omitempty"`
	// Provides the status of this Vulnerability assessment.
	Status Assessment_Status `protobuf:"varint,3,opt,name=status,proto3,enum=grafeas.v1beta1.vex.Assessment_Status" json:"status,omitempty"`
	// Contains information about this vulnerability, this will change with time.
	Threats []*Assessment_Threat `protobuf:"bytes,4,rep,name=threats,proto3" json:"threats,omitempty"`
	// Specifies details on how to handle (and presumably, fix) a vulnerability.
	Remediations []*Assessment_Remediation `protobuf:"bytes,5,rep,name=remediations,proto3" json:"remediations,omitempty"`
}

func (x *Assessment) Reset() {
	*x = Assessment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vex_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Assessment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Assessment) ProtoMessage() {}

func (x *Assessment) ProtoReflect() protoreflect.Message {
	mi := &file_vex_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Assessment.ProtoReflect.Descriptor instead.
func (*Assessment) Descriptor() ([]byte, []int) {
	return file_vex_proto_rawDescGZIP(), []int{4}
}

func (x *Assessment) GetCve() string {
	if x != nil {
		return x.Cve
	}
	return ""
}

func (x *Assessment) GetRelatedUrls() []*common_go_proto.RelatedUrl {
	if x != nil {
		return x.RelatedUrls
	}
	return nil
}

func (x *Assessment) GetStatus() Assessment_Status {
	if x != nil {
		return x.Status
	}
	return Assessment_STATUS_UNSPECIFIED
}

func (x *Assessment) GetThreats() []*Assessment_Threat {
	if x != nil {
		return x.Threats
	}
	return nil
}

func (x *Assessment) GetRemediations() []*Assessment_Remediation {
	if x != nil {
		return x.Remediations
	}
	return nil
}

// Contains the vulnerability kinetic information.
// This information can change as the vulnerability ages and new
// information becomes available.
type Assessment_Threat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ThreatType Assessment_Threat_ThreatType `protobuf:"varint,1,opt,name=threat_type,json=threatType,proto3,enum=grafeas.v1beta1.vex.Assessment_Threat_ThreatType" json:"threat_type,omitempty"`
	// Represents a thorough human-readable discussion of the threat.
	Details string `protobuf:"bytes,2,opt,name=details,proto3" json:"details,omitempty"`
}

func (x *Assessment_Threat) Reset() {
	*x = Assessment_Threat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vex_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Assessment_Threat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Assessment_Threat) ProtoMessage() {}

func (x *Assessment_Threat) ProtoReflect() protoreflect.Message {
	mi := &file_vex_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Assessment_Threat.ProtoReflect.Descriptor instead.
func (*Assessment_Threat) Descriptor() ([]byte, []int) {
	return file_vex_proto_rawDescGZIP(), []int{4, 0}
}

func (x *Assessment_Threat) GetThreatType() Assessment_Threat_ThreatType {
	if x != nil {
		return x.ThreatType
	}
	return Assessment_Threat_THREAT_TYPE_UNSPECIFIED
}

func (x *Assessment_Threat) GetDetails() string {
	if x != nil {
		return x.Details
	}
	return ""
}

// Specifies details on how to handle (and presumably, fix) a vulnerability.
type Assessment_Remediation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RemediationType Assessment_Remediation_RemediationType `protobuf:"varint,1,opt,name=remediation_type,json=remediationType,proto3,enum=grafeas.v1beta1.vex.Assessment_Remediation_RemediationType" json:"remediation_type,omitempty"`
	// Contains the date from which the remediation is available.
	RemediationDate *timestamp.Timestamp `protobuf:"bytes,2,opt,name=remediation_date,json=remediationDate,proto3" json:"remediation_date,omitempty"`
	// Contains a comprehensive human-readable discussion of the remediation.
	Details string `protobuf:"bytes,4,opt,name=details,proto3" json:"details,omitempty"`
	// Contains the URL where to obtain the remediation.
	Url *common_go_proto.RelatedUrl `protobuf:"bytes,5,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *Assessment_Remediation) Reset() {
	*x = Assessment_Remediation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vex_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Assessment_Remediation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Assessment_Remediation) ProtoMessage() {}

func (x *Assessment_Remediation) ProtoReflect() protoreflect.Message {
	mi := &file_vex_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Assessment_Remediation.ProtoReflect.Descriptor instead.
func (*Assessment_Remediation) Descriptor() ([]byte, []int) {
	return file_vex_proto_rawDescGZIP(), []int{4, 1}
}

func (x *Assessment_Remediation) GetRemediationType() Assessment_Remediation_RemediationType {
	if x != nil {
		return x.RemediationType
	}
	return Assessment_Remediation_REMEDIATION_TYPE_UNSPECIFIED
}

func (x *Assessment_Remediation) GetRemediationDate() *timestamp.Timestamp {
	if x != nil {
		return x.RemediationDate
	}
	return nil
}

func (x *Assessment_Remediation) GetDetails() string {
	if x != nil {
		return x.Details
	}
	return ""
}

func (x *Assessment_Remediation) GetUrl() *common_go_proto.RelatedUrl {
	if x != nil {
		return x.Url
	}
	return nil
}

var File_vex_proto protoreflect.FileDescriptor

var file_vex_proto_rawDesc = []byte{
	0x0a, 0x09, 0x76, 0x65, 0x78, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x13, 0x67, 0x72, 0x61,
	0x66, 0x65, 0x61, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x76, 0x65, 0x78,
	0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1a, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61,
	0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xde,
	0x02, 0x0a, 0x1b, 0x56, 0x75, 0x6c, 0x6e, 0x65, 0x72, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x41, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x74, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x10, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x29, 0x0a, 0x10, 0x6c, 0x6f, 0x6e, 0x67, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6c, 0x6f, 0x6e,
	0x67, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08,
	0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x3c, 0x0a, 0x09, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x73, 0x68, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x72,
	0x61, 0x66, 0x65, 0x61, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x76, 0x65,
	0x78, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x52, 0x09, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x12, 0x36, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x72, 0x61, 0x66, 0x65, 0x61,
	0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x76, 0x65, 0x78, 0x2e, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x3f,
	0x0a, 0x0a, 0x61, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x72, 0x61, 0x66, 0x65, 0x61, 0x73, 0x2e, 0x76, 0x31, 0x62,
	0x65, 0x74, 0x61, 0x31, 0x2e, 0x76, 0x65, 0x78, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x0a, 0x61, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x22,
	0x6a, 0x0a, 0x09, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x2b, 0x0a, 0x11, 0x69, 0x73, 0x73, 0x75, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x69, 0x73, 0x73,
	0x75, 0x69, 0x6e, 0x67, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x1c, 0x0a,
	0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x22, 0x84, 0x01, 0x0a, 0x07,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x55, 0x0a, 0x12, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x67, 0x72, 0x61, 0x66, 0x65, 0x61,
	0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x76, 0x65, 0x78, 0x2e, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52,
	0x11, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x22, 0x61, 0x0a, 0x11, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x3e, 0x0a, 0x0b, 0x67, 0x65, 0x6e, 0x65, 0x72,
	0x69, 0x63, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x72, 0x61, 0x66, 0x65, 0x61, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x52,
	0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x55, 0x72, 0x6c, 0x48, 0x00, 0x52, 0x0a, 0x67, 0x65, 0x6e,
	0x65, 0x72, 0x69, 0x63, 0x55, 0x72, 0x69, 0x42, 0x0c, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x22, 0xf1, 0x07, 0x0a, 0x0a, 0x41, 0x73, 0x73, 0x65, 0x73, 0x73,
	0x6d, 0x65, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x76, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x63, 0x76, 0x65, 0x12, 0x3e, 0x0a, 0x0c, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x75, 0x72, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x72, 0x61, 0x66, 0x65, 0x61, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x52,
	0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x55, 0x72, 0x6c, 0x52, 0x0b, 0x72, 0x65, 0x6c, 0x61, 0x74,
	0x65, 0x64, 0x55, 0x72, 0x6c, 0x73, 0x12, 0x3e, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x67, 0x72, 0x61, 0x66, 0x65, 0x61, 0x73,
	0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x76, 0x65, 0x78, 0x2e, 0x41, 0x73, 0x73,
	0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x40, 0x0a, 0x07, 0x74, 0x68, 0x72, 0x65, 0x61, 0x74,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x67, 0x72, 0x61, 0x66, 0x65, 0x61,
	0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x76, 0x65, 0x78, 0x2e, 0x41, 0x73,
	0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x54, 0x68, 0x72, 0x65, 0x61, 0x74, 0x52,
	0x07, 0x74, 0x68, 0x72, 0x65, 0x61, 0x74, 0x73, 0x12, 0x4f, 0x0a, 0x0c, 0x72, 0x65, 0x6d, 0x65,
	0x64, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b,
	0x2e, 0x67, 0x72, 0x61, 0x66, 0x65, 0x61, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31,
	0x2e, 0x76, 0x65, 0x78, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x2e,
	0x52, 0x65, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x72, 0x65, 0x6d,
	0x65, 0x64, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0xc1, 0x01, 0x0a, 0x06, 0x54, 0x68,
	0x72, 0x65, 0x61, 0x74, 0x12, 0x52, 0x0a, 0x0b, 0x74, 0x68, 0x72, 0x65, 0x61, 0x74, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x31, 0x2e, 0x67, 0x72, 0x61, 0x66,
	0x65, 0x61, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x76, 0x65, 0x78, 0x2e,
	0x41, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x54, 0x68, 0x72, 0x65, 0x61,
	0x74, 0x2e, 0x54, 0x68, 0x72, 0x65, 0x61, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x74, 0x68,
	0x72, 0x65, 0x61, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x22, 0x49, 0x0a, 0x0a, 0x54, 0x68, 0x72, 0x65, 0x61, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x1b, 0x0a, 0x17, 0x54, 0x48, 0x52, 0x45, 0x41, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0a, 0x0a,
	0x06, 0x49, 0x4d, 0x50, 0x41, 0x43, 0x54, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x45, 0x58, 0x50,
	0x4c, 0x4f, 0x49, 0x44, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x10, 0x02, 0x1a, 0x93, 0x03,
	0x0a, 0x0b, 0x52, 0x65, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x66, 0x0a,
	0x10, 0x72, 0x65, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3b, 0x2e, 0x67, 0x72, 0x61, 0x66, 0x65, 0x61,
	0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x76, 0x65, 0x78, 0x2e, 0x41, 0x73,
	0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x52, 0x65, 0x6d, 0x65, 0x64, 0x69, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x0f, 0x72, 0x65, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x45, 0x0a, 0x10, 0x72, 0x65, 0x6d, 0x65, 0x64, 0x69, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0f, 0x72, 0x65, 0x6d,
	0x65, 0x64, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x2d, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x72, 0x61, 0x66, 0x65, 0x61, 0x73, 0x2e, 0x76, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x55, 0x72, 0x6c,
	0x52, 0x03, 0x75, 0x72, 0x6c, 0x22, 0x8b, 0x01, 0x0a, 0x0f, 0x52, 0x65, 0x6d, 0x65, 0x64, 0x69,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x1c, 0x52, 0x45, 0x4d,
	0x45, 0x44, 0x49, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x4d,
	0x49, 0x54, 0x49, 0x47, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x4e,
	0x4f, 0x5f, 0x46, 0x49, 0x58, 0x5f, 0x50, 0x4c, 0x41, 0x4e, 0x4e, 0x45, 0x44, 0x10, 0x02, 0x12,
	0x12, 0x0a, 0x0e, 0x4e, 0x4f, 0x4e, 0x45, 0x5f, 0x41, 0x56, 0x41, 0x49, 0x4c, 0x41, 0x42, 0x4c,
	0x45, 0x10, 0x03, 0x12, 0x0e, 0x0a, 0x0a, 0x56, 0x45, 0x4e, 0x44, 0x4f, 0x52, 0x5f, 0x46, 0x49,
	0x58, 0x10, 0x04, 0x12, 0x0e, 0x0a, 0x0a, 0x57, 0x4f, 0x52, 0x4b, 0x41, 0x52, 0x4f, 0x55, 0x4e,
	0x44, 0x10, 0x05, 0x22, 0x64, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a,
	0x12, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x46, 0x46, 0x45, 0x43, 0x54, 0x45,
	0x44, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x4e, 0x4f, 0x54, 0x5f, 0x41, 0x46, 0x46, 0x45, 0x43,
	0x54, 0x45, 0x44, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x46, 0x49, 0x58, 0x45, 0x44, 0x10, 0x03,
	0x12, 0x17, 0x0a, 0x13, 0x55, 0x4e, 0x44, 0x45, 0x52, 0x5f, 0x49, 0x4e, 0x56, 0x45, 0x53, 0x54,
	0x49, 0x47, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x04, 0x42, 0x57, 0x0a, 0x16, 0x69, 0x6f, 0x2e,
	0x67, 0x72, 0x61, 0x66, 0x65, 0x61, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e,
	0x76, 0x65, 0x78, 0x50, 0x01, 0x5a, 0x35, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x67, 0x72, 0x61, 0x66, 0x65, 0x61, 0x73, 0x2f, 0x67, 0x72, 0x61, 0x66, 0x65, 0x61,
	0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2f,
	0x76, 0x65, 0x78, 0x5f, 0x67, 0x6f, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0xa2, 0x02, 0x03, 0x47,
	0x52, 0x41, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_vex_proto_rawDescOnce sync.Once
	file_vex_proto_rawDescData = file_vex_proto_rawDesc
)

func file_vex_proto_rawDescGZIP() []byte {
	file_vex_proto_rawDescOnce.Do(func() {
		file_vex_proto_rawDescData = protoimpl.X.CompressGZIP(file_vex_proto_rawDescData)
	})
	return file_vex_proto_rawDescData
}

var file_vex_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_vex_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_vex_proto_goTypes = []interface{}{
	(Assessment_Status)(0),                      // 0: grafeas.v1beta1.vex.Assessment.Status
	(Assessment_Threat_ThreatType)(0),           // 1: grafeas.v1beta1.vex.Assessment.Threat.ThreatType
	(Assessment_Remediation_RemediationType)(0), // 2: grafeas.v1beta1.vex.Assessment.Remediation.RemediationType
	(*VulnerabilityAssessmentNote)(nil),         // 3: grafeas.v1beta1.vex.VulnerabilityAssessmentNote
	(*Publisher)(nil),                           // 4: grafeas.v1beta1.vex.Publisher
	(*Product)(nil),                             // 5: grafeas.v1beta1.vex.Product
	(*ProductIdentifier)(nil),                   // 6: grafeas.v1beta1.vex.ProductIdentifier
	(*Assessment)(nil),                          // 7: grafeas.v1beta1.vex.Assessment
	(*Assessment_Threat)(nil),                   // 8: grafeas.v1beta1.vex.Assessment.Threat
	(*Assessment_Remediation)(nil),              // 9: grafeas.v1beta1.vex.Assessment.Remediation
	(*common_go_proto.RelatedUrl)(nil),          // 10: grafeas.v1beta1.RelatedUrl
	(*timestamp.Timestamp)(nil),                 // 11: google.protobuf.Timestamp
}
var file_vex_proto_depIdxs = []int32{
	4,  // 0: grafeas.v1beta1.vex.VulnerabilityAssessmentNote.publisher:type_name -> grafeas.v1beta1.vex.Publisher
	5,  // 1: grafeas.v1beta1.vex.VulnerabilityAssessmentNote.product:type_name -> grafeas.v1beta1.vex.Product
	7,  // 2: grafeas.v1beta1.vex.VulnerabilityAssessmentNote.assessment:type_name -> grafeas.v1beta1.vex.Assessment
	6,  // 3: grafeas.v1beta1.vex.Product.product_identifier:type_name -> grafeas.v1beta1.vex.ProductIdentifier
	10, // 4: grafeas.v1beta1.vex.ProductIdentifier.generic_uri:type_name -> grafeas.v1beta1.RelatedUrl
	10, // 5: grafeas.v1beta1.vex.Assessment.related_urls:type_name -> grafeas.v1beta1.RelatedUrl
	0,  // 6: grafeas.v1beta1.vex.Assessment.status:type_name -> grafeas.v1beta1.vex.Assessment.Status
	8,  // 7: grafeas.v1beta1.vex.Assessment.threats:type_name -> grafeas.v1beta1.vex.Assessment.Threat
	9,  // 8: grafeas.v1beta1.vex.Assessment.remediations:type_name -> grafeas.v1beta1.vex.Assessment.Remediation
	1,  // 9: grafeas.v1beta1.vex.Assessment.Threat.threat_type:type_name -> grafeas.v1beta1.vex.Assessment.Threat.ThreatType
	2,  // 10: grafeas.v1beta1.vex.Assessment.Remediation.remediation_type:type_name -> grafeas.v1beta1.vex.Assessment.Remediation.RemediationType
	11, // 11: grafeas.v1beta1.vex.Assessment.Remediation.remediation_date:type_name -> google.protobuf.Timestamp
	10, // 12: grafeas.v1beta1.vex.Assessment.Remediation.url:type_name -> grafeas.v1beta1.RelatedUrl
	13, // [13:13] is the sub-list for method output_type
	13, // [13:13] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_vex_proto_init() }
func file_vex_proto_init() {
	if File_vex_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_vex_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VulnerabilityAssessmentNote); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vex_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Publisher); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vex_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Product); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vex_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProductIdentifier); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vex_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Assessment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vex_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Assessment_Threat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vex_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Assessment_Remediation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_vex_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*ProductIdentifier_GenericUri)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_vex_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_vex_proto_goTypes,
		DependencyIndexes: file_vex_proto_depIdxs,
		EnumInfos:         file_vex_proto_enumTypes,
		MessageInfos:      file_vex_proto_msgTypes,
	}.Build()
	File_vex_proto = out.File
	file_vex_proto_rawDesc = nil
	file_vex_proto_goTypes = nil
	file_vex_proto_depIdxs = nil
}
