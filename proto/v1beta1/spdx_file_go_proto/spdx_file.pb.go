// Copyright 2021 The Grafeas Authors. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.13.0
// source: spdx_file.proto

package spdx_file_go_proto

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// File Type is intrinsic to the file, independent of how the file is being
// used
type FileNote_FileType int32

const (
	// Unspecified
	FileNote_FILE_TYPE_UNSPECIFIED FileNote_FileType = 0
	// The file is human readable source code (.c, .html, etc.)
	FileNote_SOURCE FileNote_FileType = 1
	// The file is a compiled object, target image or binary executable (.o, .a,
	// etc.)
	FileNote_BINARY FileNote_FileType = 2
	// The file represents an archive (.tar, .jar, etc.)
	FileNote_ARCHIVE FileNote_FileType = 3
	// The file is associated with a specific application type (MIME type of
	// application/*)
	FileNote_APPLICATION FileNote_FileType = 4
	// The file is associated with an audio file (MIME type of audio/* , e.g.
	// .mp3)
	FileNote_AUDIO FileNote_FileType = 5
	// The file is associated with an picture image file (MIME type of image/*,
	// e.g., .jpg, .gif)
	FileNote_IMAGE FileNote_FileType = 6
	// The file is human readable text file (MIME type of text/*)
	FileNote_TEXT FileNote_FileType = 7
	// The file is associated with a video file type (MIME type of video/*)
	FileNote_VIDEO FileNote_FileType = 8
	// The file serves as documentation
	FileNote_DOCUMENTATION FileNote_FileType = 9
	// The file is an SPDX document
	FileNote_SPDX FileNote_FileType = 10
	// The file doesn't fit into the above categories (generated artifacts, data
	// files, etc.)
	FileNote_OTHER FileNote_FileType = 11
)

// Enum value maps for FileNote_FileType.
var (
	FileNote_FileType_name = map[int32]string{
		0:  "FILE_TYPE_UNSPECIFIED",
		1:  "SOURCE",
		2:  "BINARY",
		3:  "ARCHIVE",
		4:  "APPLICATION",
		5:  "AUDIO",
		6:  "IMAGE",
		7:  "TEXT",
		8:  "VIDEO",
		9:  "DOCUMENTATION",
		10: "SPDX",
		11: "OTHER",
	}
	FileNote_FileType_value = map[string]int32{
		"FILE_TYPE_UNSPECIFIED": 0,
		"SOURCE":                1,
		"BINARY":                2,
		"ARCHIVE":               3,
		"APPLICATION":           4,
		"AUDIO":                 5,
		"IMAGE":                 6,
		"TEXT":                  7,
		"VIDEO":                 8,
		"DOCUMENTATION":         9,
		"SPDX":                  10,
		"OTHER":                 11,
	}
)

func (x FileNote_FileType) Enum() *FileNote_FileType {
	p := new(FileNote_FileType)
	*p = x
	return p
}

func (x FileNote_FileType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FileNote_FileType) Descriptor() protoreflect.EnumDescriptor {
	return file_spdx_file_proto_enumTypes[0].Descriptor()
}

func (FileNote_FileType) Type() protoreflect.EnumType {
	return &file_spdx_file_proto_enumTypes[0]
}

func (x FileNote_FileType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FileNote_FileType.Descriptor instead.
func (FileNote_FileType) EnumDescriptor() ([]byte, []int) {
	return file_spdx_file_proto_rawDescGZIP(), []int{0, 0}
}

// FileNote represents an SPDX File Information
// section: https://spdx.github.io/spdx-spec/4-file-information/
type FileNote struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Identify the full path and filename that corresponds to the file
	// information in this section
	Title string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	// This field provides information about the type of file identified
	FileType FileNote_FileType `protobuf:"varint,2,opt,name=file_type,json=fileType,proto3,enum=grafeas.v1beta1.spdx_file.FileNote_FileType" json:"file_type,omitempty"`
	// Provide a unique identifier to match analysis information on each specific
	// file in a package
	Checksum []string `protobuf:"bytes,3,rep,name=checksum,proto3" json:"checksum,omitempty"`
}

func (x *FileNote) Reset() {
	*x = FileNote{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spdx_file_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileNote) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileNote) ProtoMessage() {}

func (x *FileNote) ProtoReflect() protoreflect.Message {
	mi := &file_spdx_file_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileNote.ProtoReflect.Descriptor instead.
func (*FileNote) Descriptor() ([]byte, []int) {
	return file_spdx_file_proto_rawDescGZIP(), []int{0}
}

func (x *FileNote) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *FileNote) GetFileType() FileNote_FileType {
	if x != nil {
		return x.FileType
	}
	return FileNote_FILE_TYPE_UNSPECIFIED
}

func (x *FileNote) GetChecksum() []string {
	if x != nil {
		return x.Checksum
	}
	return nil
}

// FileOccurrence represents an SPDX File Information
// section: https://spdx.github.io/spdx-spec/4-file-information/
type FileOccurrence struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Uniquely identify any element in an SPDX document which may be referenced
	// by other elements
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// This field contains the license the SPDX file creator has concluded as
	// governing the file or alternative values if the governing license cannot be
	// determined
	LicenseConcluded string `protobuf:"bytes,2,opt,name=license_concluded,json=licenseConcluded,proto3" json:"license_concluded,omitempty"`
	// This field contains the license information actually found in the file, if
	// any
	FilesLicenseInfo []string `protobuf:"bytes,3,rep,name=files_license_info,json=filesLicenseInfo,proto3" json:"files_license_info,omitempty"`
	// This field provides a place for the SPDX file creator to record any
	// relevant background references or analysis that went in to arriving at the
	// Concluded License for a file
	LicenseComments string `protobuf:"bytes,4,opt,name=license_comments,json=licenseComments,proto3" json:"license_comments,omitempty"`
	// Identify the copyright holder of the file, as well as any dates present
	Copyright string `protobuf:"bytes,5,opt,name=copyright,proto3" json:"copyright,omitempty"`
	// This field provides a place for the SPDX file creator to record any general
	// comments about the file
	Comment string `protobuf:"bytes,6,opt,name=comment,proto3" json:"comment,omitempty"`
	// This field provides a place for the SPDX file creator to record license
	// notices or other such related notices found in the file
	Notice string `protobuf:"bytes,7,opt,name=notice,proto3" json:"notice,omitempty"`
	// This field provides a place for the SPDX file creator to record file
	// contributors
	Contributors []string `protobuf:"bytes,8,rep,name=contributors,proto3" json:"contributors,omitempty"`
	// This field provides a place for the SPDX data creator to record, at the
	// file level, acknowledgements that may be needed to be communicated in
	// some contexts
	Attributions []string `protobuf:"bytes,9,rep,name=attributions,proto3" json:"attributions,omitempty"`
}

func (x *FileOccurrence) Reset() {
	*x = FileOccurrence{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spdx_file_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileOccurrence) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileOccurrence) ProtoMessage() {}

func (x *FileOccurrence) ProtoReflect() protoreflect.Message {
	mi := &file_spdx_file_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileOccurrence.ProtoReflect.Descriptor instead.
func (*FileOccurrence) Descriptor() ([]byte, []int) {
	return file_spdx_file_proto_rawDescGZIP(), []int{1}
}

func (x *FileOccurrence) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *FileOccurrence) GetLicenseConcluded() string {
	if x != nil {
		return x.LicenseConcluded
	}
	return ""
}

func (x *FileOccurrence) GetFilesLicenseInfo() []string {
	if x != nil {
		return x.FilesLicenseInfo
	}
	return nil
}

func (x *FileOccurrence) GetLicenseComments() string {
	if x != nil {
		return x.LicenseComments
	}
	return ""
}

func (x *FileOccurrence) GetCopyright() string {
	if x != nil {
		return x.Copyright
	}
	return ""
}

func (x *FileOccurrence) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *FileOccurrence) GetNotice() string {
	if x != nil {
		return x.Notice
	}
	return ""
}

func (x *FileOccurrence) GetContributors() []string {
	if x != nil {
		return x.Contributors
	}
	return nil
}

func (x *FileOccurrence) GetAttributions() []string {
	if x != nil {
		return x.Attributions
	}
	return nil
}

var File_spdx_file_proto protoreflect.FileDescriptor

var file_spdx_file_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x73, 0x70, 0x64, 0x78, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x19, 0x67, 0x72, 0x61, 0x66, 0x65, 0x61, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x31, 0x2e, 0x73, 0x70, 0x64, 0x78, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x22, 0xb8, 0x02, 0x0a,
	0x08, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x6f, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12,
	0x49, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x67, 0x72, 0x61, 0x66, 0x65, 0x61, 0x73, 0x2e, 0x76, 0x31, 0x62,
	0x65, 0x74, 0x61, 0x31, 0x2e, 0x73, 0x70, 0x64, 0x78, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x46,
	0x69, 0x6c, 0x65, 0x4e, 0x6f, 0x74, 0x65, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x68,
	0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x63, 0x68,
	0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x22, 0xae, 0x01, 0x0a, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0a,
	0x0a, 0x06, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x42, 0x49,
	0x4e, 0x41, 0x52, 0x59, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x41, 0x52, 0x43, 0x48, 0x49, 0x56,
	0x45, 0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x41, 0x50, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x10, 0x04, 0x12, 0x09, 0x0a, 0x05, 0x41, 0x55, 0x44, 0x49, 0x4f, 0x10, 0x05, 0x12,
	0x09, 0x0a, 0x05, 0x49, 0x4d, 0x41, 0x47, 0x45, 0x10, 0x06, 0x12, 0x08, 0x0a, 0x04, 0x54, 0x45,
	0x58, 0x54, 0x10, 0x07, 0x12, 0x09, 0x0a, 0x05, 0x56, 0x49, 0x44, 0x45, 0x4f, 0x10, 0x08, 0x12,
	0x11, 0x0a, 0x0d, 0x44, 0x4f, 0x43, 0x55, 0x4d, 0x45, 0x4e, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x10, 0x09, 0x12, 0x08, 0x0a, 0x04, 0x53, 0x50, 0x44, 0x58, 0x10, 0x0a, 0x12, 0x09, 0x0a, 0x05,
	0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x0b, 0x22, 0xbe, 0x02, 0x0a, 0x0e, 0x46, 0x69, 0x6c, 0x65,
	0x4f, 0x63, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2b, 0x0a, 0x11, 0x6c, 0x69,
	0x63, 0x65, 0x6e, 0x73, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x43, 0x6f,
	0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x66, 0x69, 0x6c, 0x65, 0x73,
	0x5f, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x10, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x29, 0x0a, 0x10, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65,
	0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x12, 0x18,
	0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x6f, 0x74, 0x69,
	0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x6f, 0x74, 0x69, 0x63, 0x65,
	0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x73,
	0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x6f, 0x72, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x63, 0x0a, 0x1c, 0x69, 0x6f, 0x2e, 0x67,
	0x72, 0x61, 0x66, 0x65, 0x61, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x73,
	0x70, 0x64, 0x78, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x01, 0x5a, 0x3b, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x72, 0x61, 0x66, 0x65, 0x61, 0x73, 0x2f, 0x67,
	0x72, 0x61, 0x66, 0x65, 0x61, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x31, 0x62,
	0x65, 0x74, 0x61, 0x31, 0x2f, 0x73, 0x70, 0x64, 0x78, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x67,
	0x6f, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0xa2, 0x02, 0x03, 0x47, 0x52, 0x41, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_spdx_file_proto_rawDescOnce sync.Once
	file_spdx_file_proto_rawDescData = file_spdx_file_proto_rawDesc
)

func file_spdx_file_proto_rawDescGZIP() []byte {
	file_spdx_file_proto_rawDescOnce.Do(func() {
		file_spdx_file_proto_rawDescData = protoimpl.X.CompressGZIP(file_spdx_file_proto_rawDescData)
	})
	return file_spdx_file_proto_rawDescData
}

var file_spdx_file_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_spdx_file_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_spdx_file_proto_goTypes = []interface{}{
	(FileNote_FileType)(0), // 0: grafeas.v1beta1.spdx_file.FileNote.FileType
	(*FileNote)(nil),       // 1: grafeas.v1beta1.spdx_file.FileNote
	(*FileOccurrence)(nil), // 2: grafeas.v1beta1.spdx_file.FileOccurrence
}
var file_spdx_file_proto_depIdxs = []int32{
	0, // 0: grafeas.v1beta1.spdx_file.FileNote.file_type:type_name -> grafeas.v1beta1.spdx_file.FileNote.FileType
	1, // [1:1] is the sub-list for method output_type
	1, // [1:1] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_spdx_file_proto_init() }
func file_spdx_file_proto_init() {
	if File_spdx_file_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_spdx_file_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileNote); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spdx_file_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileOccurrence); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_spdx_file_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_spdx_file_proto_goTypes,
		DependencyIndexes: file_spdx_file_proto_depIdxs,
		EnumInfos:         file_spdx_file_proto_enumTypes,
		MessageInfos:      file_spdx_file_proto_msgTypes,
	}.Build()
	File_spdx_file_proto = out.File
	file_spdx_file_proto_rawDesc = nil
	file_spdx_file_proto_goTypes = nil
	file_spdx_file_proto_depIdxs = nil
}
